name: Staging Deploy Lambdas on PR Comment
description: "Work only for PR comments"
inputs:
  github_token:
    description: Github token to write comments on PR. Commonly secrets.GITHUB_TOKEN
    required: true
  match_comment_to_deploy:
    description: String that will look for in the PR
    required: false
    default: "deploy lambda"
  lambda_names:
    description: Function names separated by space
    required: false
  prefix_function_names:
    description: Function prefix to match
    required: true
  aws_access_key_id:
    description: AWS Key ID
    required: true
  aws_secret_access_key:
    description: AWS Secret Access Key
    required: true
  ecr_image_name:
    description: Define the repository of the ECR image
    required: true
  ecr_image_tag:
    description: Define the tag of ECR image
    required: true
  build_working_directory:
    description: Define the path of working directory of code to build Docker image
    required: true
  docker_build_extra_args:
    description: Define the extra arguments that you will set to docker build command
    required: false
    default: ""

runs:
  using: "composite"
  steps:
    - name: Check if @meetlara/lambdas-deploy is on the message
      uses: khan/pull-request-comment-trigger@master
      id: check
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
      with:
        trigger: ${{ inputs.match_comment_to_deploy }}
        prefix_only: true
        reaction: "rocket"

    - name: Checkout
      if: steps.check.outputs.triggered == 'true'
      uses: actions/checkout@v4

    - name: Checkout Pull Request
      shell: bash
      id: commit
      if: steps.check.outputs.triggered == 'true'
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
      run: |
        sudo apt install hub
        hub pr checkout ${{ github.event.issue.number }}
        echo "::set-output name=sha::$(git rev-parse HEAD)"

    - name: Deploy lambda
      if: steps.check.outputs.triggered == 'true'
      uses: meetlara/lambda-deploy@v3
      with:
        prefix_function_names: ${{ inputs.prefix_function_names }}
        lambda_names: ${{ inputs.lambda_names }}
        ecr_image_name: ${{ inputs.ecr_image_name }}
        ecr_image_tag: ${{ steps.commit.outputs.sha }}
        aws_access_key_id: ${{ inputs.aws_access_key_id }}
        aws_secret_access_key: ${{ inputs.aws_secret_access_key }}
        build_working_directory: ${{ inputs.build_working_directory }}

    - name: Message success
      if: ${{ steps.check.outputs.triggered == 'true' && success() }}
      uses: actions/github-script@v4
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
      with:
        script: |
          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'Deployment lambdas succeeded! üöÄ\n\nYou can check the deploy logs [here](https://github.com/' + context.repo.owner + '/' + context.repo.repo + '/actions/runs/' + context.runId + ')\n\nRemember, it\'s not deployed yet. AWS is doing some magic and in 2 mins it will be available üòÑ',
          });

    - name: Message failure
      if: ${{ steps.check.outputs.triggered == 'true' && failure() }}
      uses: actions/github-script@v4
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
      with:
        script: |
          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'Deployment lambdas failed! ‚ùå\n\nYou can check errors on deploy logs [here](https://github.com/' + context.repo.owner + '/' + context.repo.repo + '/actions/runs/' + context.runId + ')',
          });
